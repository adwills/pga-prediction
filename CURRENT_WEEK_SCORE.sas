/************************************************************************************************/
/* THIS PROGRAM DOES THE FOLLOWING: */
/* -COLLECTS FIELD FOR CURRENT TOURNAMENT */
/* -GATHERS CURRENT STATS BEFORE THE TOURNAMENT FOR ALL GOLFERS IN THE FIELD */
/* -CLEANS STATS DATA */
/* -PUBLISHES A FINAL _SCORE DATA SET TO BE SCORED FOR PREDICTION OF TOURNAMENT FINISHING PLACE */
/************************************************************************************************/

LIBNAME GOLF "/Local_Files/OneDrive - SAS/Projects/Golf/Data";
%INC "/Local_Files/OneDrive - SAS/Projects/Golf/Programs/TRYLOCK.sas";
%INC "/Local_Files/OneDrive - SAS/Projects/Golf/Programs/FILEECHO.sas";

/* ASSIGN YEAR */
%LET YEAR = 2021;
/* NUMBER OF TOURNAMENTS TO USE IN HISTORICAL DATA */
%LET EVENTS = 11;

/*************************GET CURRENT TOURNAMENT ID VALUE FROM HTML AND ASSIGN TO MACRO VARIABLE*************************/
FILENAME TOURNEY TEMP;

PROC HTTP 
	URL="http://www.pgatour.com/leaderboard.html"
	METHOD= "GET"
	OUT=TOURNEY;
RUN;

%FILEECHO(TOURNEY);

DATA _NULL_;
	INFILE TOURNEY LENGTH=L;
	INPUT @1 LINE $VARYING32767. L;
	IF INDEX(UPCASE(LINE),"PERMNUM") > 0 THEN DO;
		CALL SYMPUTX('TOURNID',COMPRESS(SCAN(LINE,2),"'"));
	END;
RUN;

%PUT TOURNID=&TOURNID;

/*************************GATHER FIELD FOR CURRENT TOURNAMENT*************************/
FILENAME FIELD TEMP;

/* MANUAL OVERRIDE OF TOURNAMENT */
%LET TOURNID = 016;

PROC HTTP 
	URL="https://statdata.pgatour.com/r/&TOURNID/&YEAR/leaderboard-v2.json"
	METHOD= "GET"
	OUT=FIELD;
RUN;

%FILEECHO(FIELD);

LIBNAME FIELD JSON FILEREF=FIELD;

PROC SQL;
	CREATE TABLE GOLF.FIELD_&TOURNID._&YEAR AS
	SELECT A.* FROM GOLF.ALL_PLAYERS A
	INNER JOIN FIELD.LEADERBOARD_PLAYERS B
	ON A.PID=B.PLAYER_ID;
QUIT;

PROC SQL NOPRINT;
	SELECT DISTINCT PID 
	INTO :WEEK_PIDS SEPARATED BY " "
	FROM GOLF.FIELD_&TOURNID._&YEAR;
QUIT;

%PUT &WEEK_PIDS;

/*************************DOWNLOAD EACH PLAYER'S STATS*************************/
%MACRO STAT_GRAB;

%LOCAL I NEXT_PID;
%DO I=1 %TO %SYSFUNC(COUNTW(&WEEK_PIDS));
	%LET NEXT_PID = %SCAN(&WEEK_PIDS, &I);

/* 	%LET NEXT_PID = 01249; */

	/*GET STATS FROM LAST YEAR*/
/*  	%LET YEAR = 2019;  */
	/*SEASON STATS*/
	FILENAME STATS TEMP;

	PROC HTTP 
		URL="https://statdata.pgatour.com/players/&NEXT_PID/&YEAR.stat.json"
		METHOD="GET"
		OUT=STATS;
	RUN;

	LIBNAME STATS JSON FILEREF=STATS;
	
	%PUT PID=&NEXT_PID;

	PROC SQL;
		CREATE TABLE STATS_SORT AS
		SELECT DISTINCT STATID, NAME, VALUE, &NEXT_PID AS PID
		FROM STATS.STATCATS_STATS
		WHERE ORDINAL_STATCATS LE 7
		ORDER BY 1, 2, 3;
	QUIT;

	PROC TRANSPOSE DATA=STATS_SORT OUT=STATS_TRANS PREFIX=STAT;
		BY PID;
		ID STATID;
		VAR VALUE;
	RUN;
	
	/*SAVE DATA WITH CURRENT SEASON YEAR*/
/* 	%LET YEAR = 2020; */

	%IF &I=1 %THEN %DO;
		DATA WORK.STATS_TMP;
			SET WORK.STATS_TRANS;
		RUN;	
	%END;
	
	%ELSE %DO;
		%TRYLOCK(MEMBER=WORK.STATS_TMP);
		DATA WORK.STATS_TMP;
			SET WORK.STATS_TMP WORK.STATS_TRANS;
		RUN;
		LOCK WORK.STATS_TMP CLEAR;
	%END;
	 
%END;

PROC SORT DATA=WORK.STATS_TMP NODUP DUPOUT=DUPSTATS;
	BY PID;
RUN;

%MEND STAT_GRAB;



%MACRO RESULTS_GRAB;

%LOCAL I NEXT_PID;
%DO I=1 %TO %SYSFUNC(COUNTW(&WEEK_PIDS));
	%LET NEXT_PID = %SCAN(&WEEK_PIDS, &I);

/* 	%LET NEXT_PID = 01249; */

	/*GET STATS FROM LAST YEAR*/
/*  	%LET YEAR = 2019;  */
	
	/*SEASON RESULTS*/
	FILENAME RESULTS TEMP;

	PROC HTTP 
		URL="https://statdata.pgatour.com/players/&NEXT_PID./&YEAR.results.json"
		METHOD="GET"
		OUT=RESULTS;
	RUN;
	
/* 	%FILEECHO(RESULTS); */

	LIBNAME RESULTS JSON FILEREF=RESULTS;

	PROC SQL NOPRINT;
		SELECT MAX(ORDINAL_TRNDETAILS) INTO :ROUNDS
		FROM RESULTS.TOURS_TRNDETAILS;
	QUIT;
	
	DATA RESULTS;
		LENGTH OFFMONEY $13. FEDEXEVTPTS $5.;
		SET RESULTS.TOURS_TRNDETAILS;
		LASTROUND=&ROUNDS-ORDINAL_TRNDETAILS+1;
		PID=&NEXT_PID;
		KEEP PID LASTROUND FEDEXEVTPTS OFFMONEY;
	RUN;
	
	%PUT PID=&NEXT_PID;
	
	PROC SORT DATA=RESULTS;
		BY LASTROUND;
	RUN;
	
	PROC TRANSPOSE DATA=RESULTS OUT=RESULTS_MONEY(DROP=_NAME_) PREFIX=MONEY;
		BY PID;
		ID LASTROUND;
		VAR OFFMONEY;
	RUN;
	
	PROC TRANSPOSE DATA=RESULTS OUT=RESULTS_PTS(DROP=_NAME_) PREFIX=PTS;
		BY PID;
		ID LASTROUND;
		VAR FEDEXEVTPTS;
	RUN;
	
	/*COMBINE STATS AND RESULTS*/
	DATA RESULTS_LINE;
		MERGE RESULTS_MONEY RESULTS_PTS;
		BY PID;
		ARRAY MONEY{*} MONEY:;
		ARRAY PTS{*} PTS:;
		DO I=1 TO DIM(MONEY);
			IF MISSING(MONEY{I}) THEN MONEY{I}="$0";
			IF MISSING(PTS{I}) THEN PTS{I}="0";
		END;
		DROP I;
	RUN;
	
	/*SAVE DATA WITH CURRENT SEASON YEAR*/
/* 	%LET YEAR = 2020; */

	%IF &I=1 %THEN %DO;
		DATA RESULTS_TMP;
			SET RESULTS_LINE;
		RUN;	
	%END;
	
	%ELSE %DO;
		%TRYLOCK(MEMBER=WORK.RESULTS_TMP);
		DATA RESULTS_TMP;
			SET RESULTS_TMP RESULTS_LINE;
		RUN;
		LOCK WORK.RESULTS_TMP CLEAR;
	%END;
	 
%END;

PROC SORT DATA=WORK.RESULTS_TMP NODUP;
	BY PID;
RUN;

%MEND RESULTS_GRAB;

%STAT_GRAB;
%RESULTS_GRAB;

/* %LET YEAR = 2020; */

DATA GOLF.STATS_&TOURNID._&YEAR._RAW;
	MERGE STATS_TMP RESULTS_TMP;
	BY PID;
RUN;

PROC SORT DATA=GOLF.STATS_&TOURNID._&YEAR._RAW NODUP;
	BY PID;
RUN;

/*************************CREATE STATS LOOKUP TABLE*************************/
/* PROC SQL NOPRINT; */
/* 	CREATE TABLE GOLF.STAT_LKP AS */
/* 	SELECT STATID, NAME AS STATNAME */
/* 	FROM WORK.STATS_SORT */
/* 	ORDER BY 1; */
/* QUIT; */

/**********************COURSE INFORMATION*************************/

/* FILENAME COURSE TEMP; */
/*  */
/* PROC HTTP  */
/* 	URL="https://statdata.pgatour.com/r/&TOURNID/coursestat.json" */
/* 	METHOD= "GET" */
/* 	OUT=COURSE; */
/* RUN; */
/*  */
/* LIBNAME COURSE JSON FILEREF=COURSE; */
/*  */
/* PROC SQL; */
/* 	CREATE TABLE HOLES AS */
/* 	SELECT A.ORDINAL_HOLES, A.HOLENUM, INPUT(A.PAR,1.) AS PAR, INPUT(A.YARDS,3.) AS YARDS, INPUT(B.EV2, 5.3) AS SCORE_AVG */
/* 	FROM COURSE.COURSES_HOLES A */
/* 		LEFT JOIN */
/* 		COURSE.HOLES_STATS B */
/* 		ON A.ORDINAL_HOLES = B.ORDINAL_HOLES */
/* 	WHERE A.ORDINAL_COURSES=1 AND B.ID="43108"; */
/* QUIT; */
/*  */
/* PROC SQL; */
/* 	CREATE TABLE COURSE_STATS AS */
/* 	SELECT PAR, MIN(YARDS) AS YARDS_MIN, MEAN(YARDS) AS YARDS_AVG, MAX(YARDS) AS YARDS_MAX, */
/* 		MIN(SCORE_AVG) AS SCORE_MIN, MEAN(SCORE_AVG) AS SCORE_AVG, MAX(SCORE_AVG) AS SCORE_MAX */
/* 	FROM HOLES */
/* 	GROUP BY 1 */
/* 	ORDER BY 1; */
/* QUIT; */
/*  */
/* PROC SQL; */
/* 	CREATE TABLE GOLF.COURSE_&TOURNID._&YEAR AS */
/* 	SELECT SUM(A.PAR) AS PAR, SUM(A.YARDS) AS DISTANCE,  */
/* 	&TOURNID AS TOURNID FORMAT=Z3., &YEAR AS YEAR, INPUT(B.COURSEID,3.) AS COURSEID, */
/* 	C.*, D.*, E.* */
/* 	FROM HOLES A, COURSE.COURSES B, */
/* 		(SELECT YARDS_MIN AS YARDS_MIN3, YARDS_AVG AS YARDS_AVG3, YARDS_MAX AS YARDS_MAX3, */
/* 			SCORE_MIN AS SCORE_MIN3, SCORE_AVG AS SCORE_AVG3, SCORE_MAX AS SCORE_MAX3 */
/* 			FROM COURSE_STATS WHERE PAR=3) C, */
/* 		(SELECT YARDS_MIN AS YARDS_MIN4, YARDS_AVG AS YARDS_AVG4, YARDS_MAX AS YARDS_MAX4, */
/* 			SCORE_MIN AS SCORE_MIN4, SCORE_AVG AS SCORE_AVG4, SCORE_MAX AS SCORE_MAX4 */
/* 			FROM COURSE_STATS WHERE PAR=4) D, */
/* 		(SELECT YARDS_MIN AS YARDS_MIN5, YARDS_AVG AS YARDS_AVG5, YARDS_MAX AS YARDS_MAX5, */
/* 			SCORE_MIN AS SCORE_MIN5, SCORE_AVG AS SCORE_AVG5, SCORE_MAX AS SCORE_MAX5 */
/* 			FROM COURSE_STATS WHERE PAR=5) E */
/* 	WHERE B.HOST=1 */
/* 	GROUP BY 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23; */
/* QUIT; */

/*************************CLEAN UP STATS*************************/
PROC SQL NOPRINT;
	SELECT DISTINCT "STAT"||STATID 
	INTO :STATIDS SEPARATED BY " "
	FROM GOLF.STAT_LKP;
QUIT;

%PUT &STATIDS;

PROC SQL NOPRINT;
	SELECT DISTINCT "STAT"||STRIP(STATID)||"_NEW"
	INTO :NEWSTATIDS SEPARATED BY " "
	FROM GOLF.STAT_LKP;
QUIT;

%PUT &NEWSTATIDS;

DATA SCORE_TEMP1;
	SET GOLF.STATS_&TOURNID._&YEAR._RAW (DROP=_NAME_);
	ARRAY STAT{*} &STATIDS MONEY1-MONEY&EVENTS PTS1-PTS&EVENTS;
	ARRAY NEWSTAT{*} &NEWSTATIDS NEWMONEY1-NEWMONEY&EVENTS NEWPTS1-NEWPTS&EVENTS;
	DO I = 1 TO DIM(STAT);
		IF INDEX(STAT{I},"%")>0 THEN DO;
			NEWSTAT{I}=INPUT(STAT{I},PERCENT5.2)/100;
		END;
		ELSE IF INDEX(STAT{I},"'")>0 THEN DO;
			NEWSTAT{I}=SUM(INPUT(SCAN(STAT{I},1,'"'''),5.),INPUT(SCAN(STAT{I},2,'"'''),5.)/12);
		END;
		ELSE IF INDEX(STAT{I},"$")>0 THEN DO;
			NEWSTAT{I}=INPUT(SUBSTR(STAT{I},2),COMMA20.0);
		END;
		ELSE DO;
			NEWSTAT{I}=INPUT(STAT{I},COMMA14.);
		END;
	END;
/* 	DROP &STATIDS I; */
	KEEP PID &NEWSTATIDS NEW: ;
RUN;

PROC SQL;
	CREATE TABLE SCORE_TEMP2 AS 
	SELECT A.*, B.NAMEF, B.NAMEL, INPUT(B.PID,10.) AS PID2
	FROM SCORE_TEMP1 A
	RIGHT JOIN GOLF.FIELD_&TOURNID._&YEAR B
	ON A.PID=INPUT(B.PID,10.);
QUIT;

DATA SCORE_TEMP2;
	SET SCORE_TEMP2;
	IF MISSING(PID) THEN PID=PID2;
	TOURNID=&TOURNID;
	FORMAT TOURNID Z3.;
	YEAR=&YEAR;
	DROP PID2;
RUN;

DATA SCORE_TEMP3;
	SET SCORE_TEMP2;
	ARRAY NEWSTAT{*} &NEWSTATIDS NEWMONEY1-NEWMONEY&EVENTS NEWPTS1-NEWPTS&EVENTS;
	ARRAY NEWNEWSTAT{*} &STATIDS MONEY1-MONEY&EVENTS PTS1-PTS&EVENTS;
	DO I = 1 TO DIM(NEWNEWSTAT);
		NEWNEWSTAT{I}=NEWSTAT{I};
	END;
	DROP &NEWSTATIDS I NEW:;
RUN;

PROC SQL;
	CREATE TABLE GOLF.STATS_&TOURNID._&YEAR._SCORE AS
	SELECT A.*, B.PAR, B.DISTANCE, B.COURSEID,
		B.YARDS_MIN3, B.YARDS_AVG3, B.YARDS_MAX3,
		B.SCORE_MIN3, B.SCORE_AVG3, B.SCORE_MAX3,
		B.YARDS_MIN4, B.YARDS_AVG4, B.YARDS_MAX4,
		B.SCORE_MIN4, B.SCORE_AVG4, B.SCORE_MAX4,
		B.YARDS_MIN5, B.YARDS_AVG5, B.YARDS_MAX5,
		B.SCORE_MIN5, B.SCORE_AVG5, B.SCORE_MAX5
	FROM SCORE_TEMP3 A
	INNER JOIN
	GOLF.COURSE_&TOURNID._&YEAR B
	ON A.YEAR=B.YEAR
	AND A.TOURNID=B.TOURNID;
QUIT;

PROC SORT DATA=GOLF.STATS_&TOURNID._&YEAR._SCORE OUT=GOLF.PGA_SCORING NODUP;
	BY YEAR TOURNID PID;
RUN;
